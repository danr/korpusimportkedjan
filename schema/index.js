// Generated by CoffeeScript 1.4.0
(function() {
  var add_example_button, examples, generate, load_example, logger, simplify_type, test_examples, type_match,
    __slice = [].slice;

  add_example_button = function(key, example) {
    var example_button;
    example_button = $("<button>" + key + "</button>").click(function() {
      load_example(example);
      return false;
    });
    return $("#examples").append(example_button);
  };

  $(window.document).ready(function() {
    var key;
    $.ajax({
      url: "http://localhost:8051",
      data: {
        format: "schema"
      },
      dataType: "json",
      timeout: 300000,
      type: "GET",
      success: function(data, textStatus, xhr) {
        var example, schema;
        schema = schema_utils.follow_references(data);
        console.log(schema);
        example = {
          schema: schema,
          value: schema_utils.get_default(schema)
        };
        add_example_button('annoteringslabbet', example);
        return load_example(example);
      },
      error: function() {
        var info;
        info = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return console.log(info);
      }
    });
    for (key in examples) {
      add_example_button(key, examples[key]);
    }
    return load_example(examples.array);
  });

  logger = function(f) {
    return function() {
      var arg, args, res;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      res = f.apply(null, args);
      console.log("args: " + ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          _results.push(JSON.stringify(arg));
        }
        return _results;
      })()) + " = ", res);
      return res;
    };
  };

  load_example = function(example) {
    var form;
    form = generate(example.schema, "path");
    $("#form").empty().append(form.dom);
    form.set(example.value);
    return $('#get').unbind('click').click(function() {
      var v;
      v = form.get();
      console.log(v);
      console.log(JSON.stringify(v));
      return $('#result').text(JSON.stringify(v));
    });
  };

  simplify_type = function(schema) {
    if (schema.type === "array" && schema.items.type === "string" && (schema.items["enum"] != null)) {
      return {
        "enum": schema.items["enum"],
        multi: true,
        desc: "multi-enum"
      };
    } else if (schema.type === "string" && (schema["enum"] != null)) {
      if (schema["enum"].length === 1) {
        return {
          only: schema["enum"][0],
          desc: "only"
        };
      } else {
        return {
          "enum": schema["enum"],
          multi: false,
          desc: "single-enum"
        };
      }
    } else {
      return schema.type;
    }
  };

  generate = function(schema, path) {
    return (function() {
      var decorator;
      schema.type = simplify_type(schema);
      decorator = function(make) {
        var inner_dom, obj, type;
        obj = make();
        inner_dom = obj.dom;
        type = schema.type.desc || (_.isArray(schema.type) ? "union" : schema.type);
        obj.dom = $("<div class=\"" + type + " nest\" id=\"" + path + "\"/>");
        if (schema.title != null) {
          obj.dom.append($("<div class=\"title\">" + schema.title + "</div>"));
        } else {
          console.log("no title:", schema);
        }
        if (schema.description != null) {
          obj.dom.append($("<div class=\"description\">" + schema.description + "</div>"));
        }
        obj.dom.append(inner_dom);
        return obj;
      };
      return decorator(function() {
        var dom, generate_item, i, items, items_div, key, new_button, object, objects, option, option_div, options, res, select_dom, select_parent, subschema, toggle, v, with_selected, _i, _j, _k, _len, _len1, _len2, _ref;
        if (schema.type.only != null) {
          return {
            dom: [],
            set: function(v) {},
            get: function() {
              return schema.only;
            }
          };
        } else if (schema.type["enum"] != null) {
          toggle = schema.type.multi ? "buttons-checkbox" : "buttons-radio";
          dom = $("<div class=\"btn-group\" data-toggle=\"" + toggle + "\"/>");
          _ref = schema.type["enum"];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            dom.append($("<button type=\"button\" class=\"btn\" id=\"" + v + "\">" + v + "</button>"));
          }
          return {
            dom: dom,
            set: function(vs) {
              var _j, _len1, _results;
              if (schema.type.multi) {
                dom.children("button").removeClass("active");
                _results = [];
                for (_j = 0, _len1 = vs.length; _j < _len1; _j++) {
                  v = vs[_j];
                  _results.push(dom.find("#" + v).addClass("active"));
                }
                return _results;
              } else {
                return dom.children("button").removeClass("active").filter("#" + vs).addClass("active");
              }
            },
            get: function() {
              var c, _j, _len1, _ref1, _results;
              if (schema.type.multi) {
                _ref1 = dom.children(".active");
                _results = [];
                for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                  c = _ref1[_j];
                  _results.push($(c).attr("id"));
                }
                return _results;
              } else {
                return dom.children(".active").attr("id");
              }
            }
          };
        } else if (schema.type === "string") {
          return {
            dom: dom = $("<input type=\"text\">"),
            set: function(v) {
              dom.val(v);
            },
            get: function() {
              return dom.val();
            }
          };
        } else if (schema.type === "bool") {
          return {
            dom: dom = $("<input type=\"checkbox\">"),
            set: function(v) {
              dom.attr('checked', v);
            },
            get: function() {
              return 'checked' === dom.attr('checked');
            }
          };
        } else if (schema.type === "object") {
          dom = $("<div class=\"inner object-inner\">");
          objects = (function() {
            var _results;
            _results = [];
            for (key in schema.properties) {
              _results.push(_.extend({
                key: key
              }, generate(schema.properties[key], "" + path + "_" + key)));
            }
            return _results;
          })();
          for (_j = 0, _len1 = objects.length; _j < _len1; _j++) {
            object = objects[_j];
            dom.append(object.dom);
          }
          return {
            dom: dom,
            set: function(obj) {
              var _k, _len2;
              for (_k = 0, _len2 = objects.length; _k < _len2; _k++) {
                object = objects[_k];
                object.set(obj[object.key]);
              }
            },
            get: function() {
              return _.object((function() {
                var _k, _len2, _results;
                _results = [];
                for (_k = 0, _len2 = objects.length; _k < _len2; _k++) {
                  object = objects[_k];
                  _results.push([object.key, object.get()]);
                }
                return _results;
              })());
            }
          };
        } else if (schema.type === "array") {
          dom = $("<div class=\"inner array-inner\">");
          items_div = $("<div class=\"items\">");
          items = [];
          generate_item = function() {
            var item, item_div, rm_button;
            item = generate(schema.items, "" + path + "_item");
            item_div = $("<div class=\"item\">");
            rm_button = $("<button class=\"btn btn-danger item-btn\"><i class=\"icon-minus-sign\">").click(function() {
              item_div.remove();
              items = _.without(items, item);
              return false;
            });
            items_div.append(item_div.append(item.dom, rm_button));
            return item;
          };
          new_button = $("<button class=\"btn btn-success item-btn\"><i class=\"icon-plus-sign\">").click(function() {
            items.push(generate_item());
            return false;
          });
          return {
            dom: dom.append(new_button, items_div),
            set: function(vs) {
              var item;
              items_div.empty();
              items = (function() {
                var _k, _len2, _results;
                _results = [];
                for (_k = 0, _len2 = vs.length; _k < _len2; _k++) {
                  v = vs[_k];
                  item = generate_item();
                  item.set(v);
                  _results.push(item);
                }
                return _results;
              })();
            },
            get: function() {
              var item, _k, _len2, _results;
              _results = [];
              for (_k = 0, _len2 = items.length; _k < _len2; _k++) {
                item = items[_k];
                _results.push(item.get());
              }
              return _results;
            }
          };
        } else if ((_.isArray(schema.type)) && schema.type.length === 1) {
          res = generate(schema.type[0], "" + path + "_single");
          res.dom.addClass("single");
          return res;
        } else if (_.isArray(schema.type)) {
          dom = $("<div class=\"inner union-inner\">");
          select_parent = $("<div class=\"select-parent\">");
          select_dom = $("<select>");
          options = (function() {
            var _k, _len2, _ref1, _results;
            _ref1 = schema.type;
            _results = [];
            for (i = _k = 0, _len2 = _ref1.length; _k < _len2; i = ++_k) {
              subschema = _ref1[i];
              select_dom.append($("<option value=\"" + i + "\">" + subschema.title + "</option>"));
              option = generate(subschema, "" + path + "_" + i);
              if (subschema["default"] != null) {
                option.set(subschema["default"]);
              }
              _results.push(option);
            }
            return _results;
          })();
          for (i = _k = 0, _len2 = options.length; _k < _len2; i = ++_k) {
            option = options[i];
            option_div = $("<div class=\"option\" id=\"" + i + "\"/>");
            dom.append(option_div.append(option.dom));
          }
          with_selected = (function() {
            var selected;
            selected = null;
            return {
              set: function(s) {
                if (s != null) {
                  selected = s;
                }
                dom.children(".option").hide();
                dom.children(".option#" + selected).show();
                return select_dom.val(selected);
              },
              get: function() {
                return selected;
              }
            };
          })();
          with_selected.set(0);
          select_parent.append(select_dom);
          select_dom.change(function() {
            return with_selected.set(select_dom.val());
          });
          return {
            dom: dom.prepend(select_parent),
            set: function(x) {
              var _l, _len3, _ref1;
              _ref1 = schema.type;
              for (i = _l = 0, _len3 = _ref1.length; _l < _len3; i = ++_l) {
                subschema = _ref1[i];
                if (!(type_match(x, subschema))) {
                  continue;
                }
                options[i].set(x);
                with_selected.set(i);
                break;
              }
            },
            get: function() {
              return options[with_selected.get()].get();
            }
          };
        } else {
          throw new Error("The type of " + (JSON.stringify(schema)) + " is not supported!");
        }
      });
    })();
  };

  type_match = (function() {
    var all, any, map, _ref;
    _ref = [_.all, _.any, _.map], all = _ref[0], any = _ref[1], map = _ref[2];
    return function(value, schema) {
      if (schema.type === "object" && _.isObject(value)) {
        return all(map(schema.properties, function(subschema, key) {
          return (function() {
            return (value[key] != null) && type_match(value[key], subschema);
          })();
        }));
      } else if (schema.type === "array" && _.isArray(value)) {
        return all(value, function(v) {
          return type_match(v, schema.items);
        });
      } else if (_.isArray(schema.type)) {
        return any(schema.type, function(s) {
          return type_match(value, s);
        });
      } else if (schema["enum"] != null) {
        return _.contains(schema["enum"], value);
      } else {
        return schema.type === "string" && _.isString(value) || schema.type === "bool" && _.isBoolean(value);
      }
    };
  })();

  examples = {
    union: {
      schema: {
        title: "Union type",
        type: [
          {
            title: "Checkbox",
            type: "bool"
          }, {
            title: "String",
            type: "string"
          }
        ]
      },
      value: "hello"
    },
    complex: {
      schema: {
        title: "Complex Schema",
        type: "object",
        properties: {
          extra: {
            title: "Extra Tags",
            type: "array",
            items: {
              title: "Extra Tag",
              type: "object",
              properties: {
                tag: {
                  title: "Tag Name",
                  type: "string"
                },
                attrs: {
                  title: "Attributes",
                  type: "array",
                  items: {
                    title: "Attribute",
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      value: {
        extra: [
          {
            tag: "chapter",
            attrs: ["title", "author"]
          }, {
            tag: "header",
            attrs: ["date", "journal"]
          }
        ]
      }
    },
    object: {
      schema: {
        title: "Two objects",
        type: "object",
        properties: {
          name: {
            title: "Name",
            type: "string"
          },
          happy: {
            title: "Happy",
            type: "bool"
          }
        }
      },
      value: {
        name: "Test name",
        happy: true
      }
    },
    array: {
      schema: {
        title: "An array of strings",
        type: "array",
        items: {
          title: "A string in the array",
          type: "string",
          "default": "default string value"
        }
      },
      value: ["first string", "second string"]
    },
    string: {
      schema: {
        title: "A string",
        type: "string"
      },
      value: "a string value"
    },
    bool: {
      schema: {
        title: "A checkbox",
        type: "bool"
      },
      value: true
    }
  };

  examples.combine = {
    schema: {
      title: "All of them combined, as an array!!",
      description: "Might work!",
      type: 'array',
      items: {
        title: "An item!",
        type: _.values(_.pluck(examples, 'schema'))
      }
    },
    value: _.values(_.pluck(examples, 'value'))
  };

  test_examples = function() {
    return _.map(examples, function(example, key) {
      return console.log(key, type_match(example.value, example.schema));
    });
  };

}).call(this);
