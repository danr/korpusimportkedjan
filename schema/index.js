// Generated by CoffeeScript 1.4.0
(function() {
  var examples, generate, load_example, type_match;

  $(window.document).ready(function() {
    var key, _fn;
    _fn = function(key) {
      var example_button;
      example_button = $("<button>" + key + "</button>").click(function() {
        console.log("Loading example ", key, " with value ", examples[key]);
        load_example(examples[key]);
        return false;
      });
      return $("#examples").append(example_button);
    };
    for (key in examples) {
      _fn(key);
    }
    return load_example(examples.union);
  });

  load_example = function(example) {
    var form;
    console.log(example);
    form = generate(example.schema, "value");
    $("#form").empty().append(form.dom);
    form.set(example.value);
    return $('#get').unbind('click').click(function() {
      var v;
      v = form.get();
      console.log(v);
      console.log(JSON.stringify(v));
      return $('#result').text(JSON.stringify(v));
    });
  };

  generate = function(schema, path) {
    var dom, generate_item, i, items, items_div, key, new_button, object, objects, option, option_div, options, select_dom, subschema, with_selected, _i, _j, _len, _len1;
    if (schema.type === "string") {
      return {
        dom: dom = $("<span class=\"string\">" + schema.title + ": <input id=\"" + path + "\"></span>"),
        set: function(v) {
          $(dom).find(":input").val(v);
        },
        get: function() {
          return $(dom).find(":input").val();
        }
      };
    } else if (schema.type === "bool") {
      return {
        dom: dom = $("<span class=\"bool\"><input id=\"" + path + "\" type=\"checkbox\"> " + schema.title + "</span>"),
        set: function(v) {
          $(dom).find(":checkbox").attr('checked', v);
        },
        get: function() {
          return 'checked' === $(dom).find(":checkbox").attr('checked');
        }
      };
    } else if (schema.type === "object") {
      dom = $("<div class=\"object\"><strong>" + schema.title + "</strong></div>");
      objects = (function() {
        var _results;
        _results = [];
        for (key in schema.properties) {
          _results.push(_.extend({
            key: key
          }, generate(schema.properties[key], "" + path + "_" + key)));
        }
        return _results;
      })();
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        object = objects[_i];
        dom.append(object.dom);
      }
      return {
        dom: dom,
        set: function(obj) {
          var _j, _len1;
          for (_j = 0, _len1 = objects.length; _j < _len1; _j++) {
            object = objects[_j];
            object.set(obj[object.key]);
          }
        },
        get: function() {
          return _.object((function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = objects.length; _j < _len1; _j++) {
              object = objects[_j];
              _results.push([object.key, object.get()]);
            }
            return _results;
          })());
        }
      };
    } else if (schema.type === "array") {
      dom = $("<div class=\"array\"><strong>" + schema.title + "</strong></div>");
      items_div = $("<div class=\"items\">");
      items = [];
      generate_item = function() {
        var item, item_div, rm_button;
        item = generate(schema.items, "" + path + "_item");
        item_div = $("<div class=\"item\">");
        rm_button = $("<button>rm</button>").click(function() {
          item_div.remove();
          items = _.without(items, item);
          return false;
        });
        items_div.append(item_div.append(item.dom, rm_button));
        return item;
      };
      new_button = $("<button>mk</button>").click(function() {
        items.push(generate_item());
        return false;
      });
      return {
        dom: dom.append(new_button, items_div),
        set: function(vs) {
          var item, v;
          items_div.empty();
          items = (function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = vs.length; _j < _len1; _j++) {
              v = vs[_j];
              item = generate_item();
              item.set(v);
              _results.push(item);
            }
            return _results;
          })();
        },
        get: function() {
          var item, _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
            item = items[_j];
            _results.push(item.get());
          }
          return _results;
        }
      };
    } else if ($.isArray(schema.type)) {
      dom = $("<div class=\"union\">");
      select_dom = $("<select>");
      options = (function() {
        var _j, _len1, _ref, _results;
        _ref = schema.type;
        _results = [];
        for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
          subschema = _ref[i];
          select_dom.append($("<option value=\"" + i + "\">" + subschema.title + "</option>"));
          _results.push(generate(subschema, "" + path + "_" + i));
        }
        return _results;
      })();
      for (i = _j = 0, _len1 = options.length; _j < _len1; i = ++_j) {
        option = options[i];
        option_div = $("<div class=\"option\" id=\"" + i + "\"/>");
        dom.append(option_div.append(option.dom));
      }
      with_selected = (function() {
        var selected;
        selected = null;
        return {
          set: function(s) {
            if (s != null) {
              selected = s;
            }
            dom.children(".option").css("display", "none");
            dom.children(".option#" + selected).css("display", "block");
            return select_dom.val(selected);
          },
          get: function() {
            return selected;
          }
        };
      })();
      with_selected.set(0);
      select_dom.change(function() {
        return set_selected(select_dom.val());
      });
      return {
        dom: dom.prepend($("<strong>" + schema.title + "</strong>"), select_dom),
        set: function(x) {
          var _k, _len2, _ref;
          _ref = schema.type;
          for (i = _k = 0, _len2 = _ref.length; _k < _len2; i = ++_k) {
            subschema = _ref[i];
            if (!(type_match(x, subschema))) {
              continue;
            }
            options[i].set(x);
            with_selected.set(i);
            break;
          }
        },
        get: function() {
          return options[with_selected.get()].get();
        }
      };
    } else {
      throw new Error("The type of " + (JSON.stringify(schema)) + " is not supported!");
    }
  };

  type_match = (function() {
    var all, any, map, _ref;
    _ref = [_.all, _.any, _.map], all = _ref[0], any = _ref[1], map = _ref[2];
    return function(value, schema) {
      return any([
        schema.type === "string" && _.isString(value), schema.type === "bool" && _.isBoolean(value), schema.type === "object" && _.isObject(value) && all(map(schema.properties, function(key, subschema) {
          return type_match(value.key, subschema);
        })), _.isArray(schema.type) && any(schema.type, function(s) {
          return type_match(value, s);
        })
      ]);
    };
  })();

  examples = {
    union: {
      schema: {
        title: "Union type",
        type: [
          {
            title: "Checkbox",
            type: "bool"
          }, {
            title: "String",
            type: "string"
          }
        ]
      },
      value: "hello"
    },
    complex: {
      schema: {
        title: "Complex Schema",
        type: "object",
        properties: {
          extra: {
            title: "Extra Tags",
            type: "array",
            items: {
              title: "Extra Tag",
              type: "object",
              properties: {
                tag: {
                  title: "Tag Name",
                  type: "string"
                },
                attrs: {
                  title: "Attributes",
                  type: "array",
                  items: {
                    title: "Attribute",
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      value: {
        extra: [
          {
            tag: "chapter",
            attrs: ["title", "author"]
          }, {
            tag: "header",
            attrs: ["date", "journal"]
          }
        ]
      }
    },
    object: {
      schema: {
        title: "Two objects",
        type: "object",
        properties: {
          name: {
            title: "Name",
            type: "string"
          },
          happy: {
            title: "Happy",
            type: "bool"
          }
        }
      },
      value: {
        name: "Test name",
        happy: true
      }
    },
    array: {
      schema: {
        title: "An array of strings",
        type: "array",
        items: {
          title: "A string in the array",
          type: "string",
          "default": "default string value"
        }
      },
      value: ["first string", "second string"]
    },
    string: {
      schema: {
        title: "A string",
        type: "string"
      },
      value: "a string value"
    },
    bool: {
      schema: {
        title: "A checkbox",
        type: "bool"
      },
      value: true
    }
  };

}).call(this);
