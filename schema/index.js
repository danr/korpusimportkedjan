// Generated by CoffeeScript 1.4.0
(function() {
  var examples, generate, generate_item, load_example;

  $(window.document).ready(function() {
    var key, _fn;
    _fn = function(key) {
      var example_button;
      example_button = $("<button>" + key + "</button>").click(function() {
        console.log("Loading example ", key, " with value ", examples[key]);
        load_example(examples[key]);
        return false;
      });
      return $("#examples").append(example_button);
    };
    for (key in examples) {
      _fn(key);
    }
    return load_example(examples.complex);
  });

  load_example = function(example) {
    var form_dom, form_get, form_load, _ref;
    console.log(example);
    _ref = generate(example.schema, "value"), form_dom = _ref[0], form_load = _ref[1], form_get = _ref[2];
    $("#form").empty().append(form_dom);
    form_load(example.value);
    return $('#get').unbind('click').click(function() {
      var v;
      v = form_get();
      console.log(v);
      console.log(JSON.stringify(v));
      return $('#result').text(JSON.stringify(v));
    });
  };

  generate = function(schema, path) {
    var dom, dom_key, get, get_key, getters, items_div, items_get, key, new_button, set, set_key, setters, _ref;
    switch (schema.type) {
      case "string":
        return [
          dom = $("<span class=\"string\">" + schema.title + ": <input id=\"" + path + "\"></span>"), function(v) {
            console.log("Setting ", v, " to input elements under ", dom);
            return $(dom).find(":input").val(v);
          }, function() {
            console.log("Retreiving value from input elements under ", dom);
            return $(dom).find(":input").val();
          }
        ];
      case "bool":
        return [
          dom = $("<span class=\"bool\"><input id=\"" + path + "\" type=\"checkbox\"> " + schema.title + "</span>"), function(v) {
            console.log("Setting ", v, " to checkbox elements under ", dom);
            return $(dom).find(":checkbox").attr('checked', v);
          }, function() {
            console.log("Retreiving value from checkbox elements under ", dom);
            return 'checked' === $(dom).find(":checkbox").attr('checked');
          }
        ];
      case "object":
        dom = $("<div class=\"object\"><strong>" + schema.title + "</strong></div>");
        setters = [];
        getters = [];
        for (key in schema.properties) {
          _ref = generate(schema.properties[key], "" + path + "_" + key), dom_key = _ref[0], set_key = _ref[1], get_key = _ref[2];
          dom.append($("<div>").append(dom_key));
          setters.push([key, set_key]);
          getters.push([key, get_key]);
        }
        set = function(x) {
          var _i, _len, _ref1;
          console.log("Setting object ", x, " to ", dom);
          for (_i = 0, _len = setters.length; _i < _len; _i++) {
            _ref1 = setters[_i], key = _ref1[0], set_key = _ref1[1];
            console.log("Setting ", key, " with value ", x[key], " of object ", x, " pertaining to ", dom);
            set_key(x[key]);
          }
        };
        get = function() {
          var obj, _i, _len, _ref1;
          console.log("Getting object from items ", dom);
          obj = {};
          for (_i = 0, _len = getters.length; _i < _len; _i++) {
            _ref1 = getters[_i], key = _ref1[0], get_key = _ref1[1];
            obj[key] = get_key();
          }
          return obj;
        };
        return [dom, set, get];
      case "array":
        dom = $("<div class=\"array\"><strong>" + schema.title + "</strong></div>");
        items_div = $("<div class=\"items\">");
        items_get = [];
        new_button = $("<button>mk</button>").click(function() {
          var item_div, item_get, _item_load, _ref1;
          _ref1 = generate_item(schema.items, path), item_div = _ref1[0], _item_load = _ref1[1], item_get = _ref1[2];
          items_div.append(item_div);
          items_get.push(item_get);
          return false;
        });
        return [
          dom.append(new_button, items_div), function(vs) {
            var item_dom, item_get, item_set, v, _i, _len, _ref1, _results;
            console.log("Setting array", vs, " to items div ", items_div);
            items_div.empty();
            _results = [];
            for (_i = 0, _len = vs.length; _i < _len; _i++) {
              v = vs[_i];
              _ref1 = generate_item(schema.items, path), item_dom = _ref1[0], item_set = _ref1[1], item_get = _ref1[2];
              items_div.append(item_dom);
              items_get.push(item_get);
              _results.push(item_set(v));
            }
            return _results;
          }, function() {
            var item_get, _i, _len, _results;
            console.log("Getting array from items ", items_div);
            _results = [];
            for (_i = 0, _len = items_get.length; _i < _len; _i++) {
              item_get = items_get[_i];
              _results.push(item_get());
            }
            return _results;
          }
        ];
    }
  };

  generate_item = function(schema, path) {
    var item_div, item_dom, item_get, item_load, rm_button, _ref;
    item_div = $("<div class=\"item\">");
    rm_button = $("<button>rm</button>").click(function() {
      item_div.remove();
      return false;
    });
    _ref = generate(schema, "" + path + "_element"), item_dom = _ref[0], item_load = _ref[1], item_get = _ref[2];
    return [item_div.append(item_dom, rm_button), item_load, item_get];
  };

  examples = {
    complex: {
      schema: {
        title: "Complex Schema",
        type: "object",
        properties: {
          extra: {
            title: "Extra Tags",
            type: "array",
            items: {
              title: "Extra Tag",
              type: "object",
              properties: {
                tag: {
                  title: "Tag Name",
                  type: "string"
                },
                attrs: {
                  title: "Attributes",
                  type: "array",
                  items: {
                    title: "Attribute",
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      value: {
        extra: [
          {
            tag: "chapter",
            attrs: ["title", "author"]
          }, {
            tag: "header",
            attrs: ["date", "journal"]
          }
        ]
      }
    },
    object: {
      schema: {
        title: "Two objects",
        type: "object",
        properties: {
          name: {
            title: "Name",
            type: "string"
          },
          happy: {
            title: "Happy",
            type: "bool"
          }
        }
      },
      value: {
        name: "Test name",
        happy: true
      }
    },
    array: {
      schema: {
        title: "An array of strings",
        type: "array",
        items: {
          title: "A string in the array",
          type: "string",
          "default": "default string value"
        }
      },
      value: ["first string", "second string"]
    },
    string: {
      schema: {
        title: "A string",
        type: "string"
      },
      value: "a string value"
    },
    bool: {
      schema: {
        title: "A checkbox",
        type: "bool"
      },
      value: true
    }
  };

}).call(this);
