// Generated by CoffeeScript 1.4.0
(function() {
  var SLICE_SIZE, append_array_to_table, display, lemgram_link, saldo_link, show_next, split_pipes, tabulate_sentence, to_array;

  to_array = function(x) {
    if (!(x != null)) {
      return [];
    } else if (!_.isArray(x)) {
      return [x];
    } else {
      return x;
    }
  };

  append_array_to_table = function(tbl, array) {
    var col, row, tr, _i, _j, _len, _len1, _results;
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      row = array[_i];
      tr = $("<tr/>");
      for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
        col = row[_j];
        tr.append($("<td>").append(col));
      }
      _results.push(tbl.append(tr));
    }
    return _results;
  };

  split_pipes = function(f) {
    return function(s) {
      var a, sp;
      sp = (s === "|" ? "" : s.substring(1, s.length - 1));
      a = sp.split("|");
      if (a.join("")) {
        return _.map(a, f).join(", ");
      } else {
        return "&nbsp;";
      }
    };
  };

  saldo_link = function(s) {
    return "<a target=\"_blank\" href=\"" + config.karp_address + "#search=sense%7C" + s + "\">" + s + "</a>";
  };

  lemgram_link = function(s) {
    return "<a target=\"_blank\" href=\"" + config.karp_address + "#search=lemgram%7C" + s + "\">" + s + "</a>";
  };

  tabulate_sentence = function(columns, make_deptrees) {
    return function(sent) {
      var col, deprel_div, header, table, word, words, _i, _len;
      table = $("<table class=\"table table-striped table-bordered table-condensed\"/>");
      header = $("<tr/>");
      for (_i = 0, _len = columns.length; _i < _len; _i++) {
        col = columns[_i];
        header.append($("<th>" + col.name + "</th>"));
      }
      table.append(header);
      words = to_array(sent.w);
      append_array_to_table(table, (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = words.length; _j < _len1; _j++) {
          word = words[_j];
          _results.push((function() {
            var _k, _len2, _results1;
            _results1 = [];
            for (_k = 0, _len2 = columns.length; _k < _len2; _k++) {
              col = columns[_k];
              _results1.push($("<span/>").html(col.correct(word[col.id] || "&nbsp;")));
            }
            return _results1;
          })());
        }
        return _results;
      })());
      if (make_deptrees) {
        deprel_div = $("<div/>").attr("id", sent.id);
        table.prepend($("<tr/>").append($("<td/>").attr("colspan", columns.length).css("background-color", "#FFFFFF").append(deprel_div)));
        deprel_div.show("slow", function() {
          return draw_brat_tree(words, sent.id);
        });
      }
      return table;
    };
  };

  display = function(sentence_handler) {
    var rec;
    return rec = function(tag, div) {
      return co.forM(tag.children, function(child) {
        var child_div;
        if (child.nodeName === "sentence") {
          console.log("Making a sentence from ", $(child));
          return co.yld(function() {
            return div.append(sentence_handler($.xml2json(child)));
          });
        } else {
          div.append(child_div = $("<div style='border: 3px grey solid; margin:3px; padding: 3px'>\n    <span>&lt;" + child.nodeName + "&gt;</span>\n</div>"));
          return rec(child, child_div);
        }
      });
    };
  };

  SLICE_SIZE = 4;

  show_next = function(m_suspended, fuel) {
    var dom_link, dom_load_more, m, new_suspended, show_more;
    m = m_suspended();
    if (m.result != null) {

    } else if (m.cont != null) {
      m.output();
      new_suspended = m.cont({});
      if (fuel > 0) {
        return show_next(new_suspended, fuel - 1);
      } else {
        dom_link = $("<a href=\"#\">").localize_element({
          se: "Ladda fler meningar...",
          en: "Load more sentences..."
        });
        dom_load_more = $("<div/>").append(dom_link);
        $('#result').append(dom_load_more);
        show_more = function() {
          dom_load_more.detach();
          show_next(new_suspended, SLICE_SIZE);
          return false;
        };
        dom_link.click(show_more);
        return dom_load_more.waypoint(show_more, {
          offset: "100%",
          triggerOnce: true,
          onlyOnScroll: true
        });
      }
    }
  };

  window.make_table = function(data, attributes) {
    var columns, make_deptrees, new_window, required, s, _i, _len, _ref;
    columns = (function() {
      var _i, _len, _ref, _results;
      _ref = ["pos", "msd", "lemma", "lex", "saldo", "prefix", "suffix", "ref", "dephead", "deprel"];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        _results.push({
          name: s,
          id: s
        });
      }
      return _results;
    })();
    columns.unshift({
      name: "ord",
      id: "text"
    });
    columns = _.filter(columns, function(col) {
      return _.contains(attributes, col.id);
    });
    if (_.contains(attributes, "msd")) {
      columns = _.reject(columns, function(col) {
        return col.id === "pos";
      });
    }
    (function() {
      var col, correct, _i, _len, _results;
      correct = {
        msd: function(s) {
          return s.split(".").join(". ");
        },
        lemma: split_pipes(_.identity),
        lex: split_pipes(lemgram_link),
        saldo: split_pipes(saldo_link),
        prefix: split_pipes(lemgram_link),
        suffix: split_pipes(lemgram_link)
      };
      _results = [];
      for (_i = 0, _len = columns.length; _i < _len; _i++) {
        col = columns[_i];
        _results.push(col.correct = correct[col.id] || _.identity);
      }
      return _results;
    })();
    make_deptrees = true;
    _ref = ["word", "pos", "ref", "dephead", "deprel"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      required = _ref[_i];
      make_deptrees = make_deptrees && _.contains(attributes, required);
    }
    (function() {
      var corpus, display_suspended, tables_div;
      $("#result").empty().append(tables_div = $("<div/>"));
      corpus = (data.getElementsByTagName("corpus"))[0];
      display_suspended = (display(tabulate_sentence(columns, make_deptrees)))(corpus, tables_div);
      return show_next(display_suspended, SLICE_SIZE);
    })();
    new_window = function(mime, content) {
      var w;
      w = window.open(",");
      w.document.open(mime, "replace");
      w.document.write(content);
      return w.document.close();
    };
    $("#extra_buttons").empty().append($("<button class=\"btn\">Visa XML</button>").click(function() {
      new_window("application/xml", (new XMLSerializer()).serializeToString(data));
      return false;
    }));
  };

}).call(this);
