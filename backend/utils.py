# Some utility functions

from subprocess import Popen, PIPE, call

import errno
import logging
import os
import time
import urlparse

log = logging.getLogger('pipeline.' + __name__)

def pretty_epoch_time(t):
    """
    Prints an epoch time nicely
    """
    dateformat = "%Y-%m-%d %H:%M:%S"
    return time.strftime(dateformat, time.localtime(t))

def query(environ, key, default):
    """
    Caches the environment dictionary, and returns the value of a given key,
    or the default value if it does not exist.
    """
    if 'query_dict' not in environ:
        environ['query_dict'] = urlparse.parse_qs(environ.get('QUERY_STRING',""))
    return environ['query_dict'].get(key, [default])[0]

def text(environ):
    """
    Either get the POST content, or from the "text" query variable.
    """
    try:
        length = int(environ.get('CONTENT_LENGTH', '0'))
    except ValueError:
        length = 0

    if length != 0:
        return environ['wsgi.input'].read(length)
    else:
        return query(environ, 'text', '')

def make_hash(*texts):
    """
    The text is hashed together with its makefile because the built corpus
    will look different on many settings. For example, if word annotations
    are taken from the corpus or generated by our tools.
    """
    import hashlib
    return hashlib.sha1("".join(texts)).hexdigest()

def make(settings):
    """
    Calls make with a given settings (a dict containing JSON valid by the schema)
    """
    log.info("Calling /usr/bin/make %s" % ' '.join(settings))
    return Popen(['/usr/bin/make'] + settings,
                 shell=False, close_fds=False,
                 stdin=None, stdout=PIPE, stderr=PIPE)

def mkdir(d):
    """
    Makes a directory
    """
    try:
        os.makedirs(d, mode=0777)
    except OSError as exc:
        if exc.errno == errno.EEXIST:
            pass
        else:
            raise
    call(['chmod', '777', d, '-v'])

def rmdir(d):
    """
    Removes a directory
    """
    call(['rm', '-rf', d])
